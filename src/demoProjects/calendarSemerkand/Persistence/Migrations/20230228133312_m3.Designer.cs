// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20230228133312_m3")]
    partial class m3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CountryName");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<double>("GreenwichDelta")
                        .HasColumnType("float")
                        .HasColumnName("GreenwichDelta");

                    b.Property<string>("GreenwichtenZamanCinsindenFarki")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GreenwichtenZamanCinsindenFarki");

                    b.Property<string>("IhlasTemkin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IhlasTemkin");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("Latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("Longitude");

                    b.Property<double>("LongitudeDelta")
                        .HasColumnType("float")
                        .HasColumnName("LongitudeDelta");

                    b.Property<double>("LongitudeDeltaFromService")
                        .HasColumnType("float")
                        .HasColumnName("LongitudeDeltaFromService");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<double>("Offset")
                        .HasColumnType("float")
                        .HasColumnName("Offset");

                    b.Property<string>("SehirKisa")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SehirKisa");

                    b.Property<string>("StandartBoylamQuery")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StandartBoylamQuery");

                    b.Property<double>("StandartMeridian")
                        .HasColumnType("float")
                        .HasColumnName("StandartMeridian");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DaylightSavingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CityName");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CountryName");

                    b.Property<string>("End")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("End");

                    b.Property<int>("EndDiff")
                        .HasColumnType("int")
                        .HasColumnName("EndDiff");

                    b.Property<string>("Start")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Start");

                    b.Property<int?>("StartDiff")
                        .HasColumnType("int")
                        .HasColumnName("StartDiff");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("DaylightSavingTimes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PrayTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Asr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Asr");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CityName");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CountryName");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Fajr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Fajr");

                    b.Property<string>("Imsak")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Imsak");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Isha")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Isha");

                    b.Property<string>("Israk")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Israk");

                    b.Property<string>("Maghrib")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Maghrib");

                    b.Property<string>("Tulu")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tulu");

                    b.Property<string>("Zuhr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Zuhr");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("PrayTimes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbrevation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Abbrevation");

                    b.Property<double?>("BasicOffset")
                        .HasColumnType("float")
                        .HasColumnName("BasicOffset");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CityName");

                    b.Property<string>("Coordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Coordinate");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CountryName");

                    b.Property<double?>("DstOffset")
                        .HasColumnType("float")
                        .HasColumnName("DstOffset");

                    b.Property<string>("F6")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("F6");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Longitude");

                    b.Property<string>("NewLocalTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NewLocalTime");

                    b.Property<string>("NewLocalTime1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NewLocalTime1");

                    b.Property<double?>("NewTotalOffset")
                        .HasColumnType("float")
                        .HasColumnName("NewTotalOffset");

                    b.Property<double?>("NewTotalOffset1")
                        .HasColumnType("float")
                        .HasColumnName("NewTotalOffset1");

                    b.Property<string>("OldLocalTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OldLocalTime");

                    b.Property<string>("OldLocalTime1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OldLocalTime1");

                    b.Property<double?>("TotalOffset")
                        .HasColumnType("float")
                        .HasColumnName("TotalOffset");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Times", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DaylightSavingTime", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("DaylightSavingTimes")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.PrayTime", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("PrayTimes")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.Time", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("DaylightSavingTimes");

                    b.Navigation("PrayTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
